# bot.py
import json
import os
from math import ceil
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

DATA_FILE = "data.json"
BOT_TOKEN = os.environ.get("BOT_TOKEN")  # –ø–æ—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

# --- —É—Ç–∏–ª–∏—Ç—ã ---
def load_data():
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

# –î–µ–ª–∏–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ chars_per_page —Å–∏–º–≤–æ–ª–æ–≤ (–ø–æ–ø—Ä–æ–±—É–π 1500-2500)
def paginate_text(text, chars_per_page=1800):
    pages = []
    i = 0
    while i < len(text):
        cut = i + chars_per_page
        # –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–µ–∑–∞—Ç—å –ø–æ –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏/—Ç–æ—á–∫–µ –¥–ª—è —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        if cut < len(text):
            # –∏—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ cut
            j = text.rfind("\n", i, cut)
            if j == -1:
                j = text.rfind(". ", i, cut)
            if j == -1:
                j = cut
            else:
                j += 1
            pages.append(text[i:j].strip())
            i = j
        else:
            pages.append(text[i:].strip())
            break
    return pages

# –†—É—Å—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç (–≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)
RUS_ALPHABET = list("–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø")

# --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    kb = []
    row = []
    for key, v in data.items():
        row.append(InlineKeyboardButton(v.get("display_name", key), callback_data=f"thinker:{key}"))
        if len(row) == 2:
            kb.append(row); row = []
    if row:
        kb.append(row)
    kb.append([InlineKeyboardButton("–û –±–æ—Ç–µ", callback_data="about")])
    text = "üìö <b>–ö–Ω–∏–≥–∞ –º—ã—Å–ª–∏—Ç–µ–ª–µ–π</b>\n\n–í—ã–±–µ—Ä–∏ –º—ã—Å–ª–∏—Ç–µ–ª—è:"
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(kb), parse_mode="HTML")

async def about_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("–ë–æ—Ç-¬´–∫–Ω–∏–≥–∞¬ª. –í—ã–±–∏—Ä–∞–π –º—ã—Å–ª–∏—Ç–µ–ª—è –∏ —á–∏—Ç–∞–π –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∏ –≥–ª–æ—Å—Å–∞—Ä–∏–π. –°–¥–µ–ª–∞–Ω–æ –¥–ª—è —É—á–µ–±—ã.")

async def thinker_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    data = load_data()
    _, thinker_key = update.callback_query.data.split(":")
    thinker = data.get(thinker_key)
    if not thinker:
        await update.callback_query.edit_message_text("–ù–µ –Ω–∞–π–¥–µ–Ω –º—ã—Å–ª–∏—Ç–µ–ª—å.")
        return

    bio = thinker.get("bio", "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    pages = paginate_text(bio)
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ user_data: current view
    context.user_data["view"] = {"type": "bio", "thinker": thinker_key, "page": 0, "pages_count": len(pages)}
    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –Ω–∞–∑–∞–¥/–≤–ø–µ—Ä—ë–¥, –≥–ª–æ—Å—Å–∞—Ä–∏–π, –Ω–∞–∑–∞–¥ –≤ —Å–ø–∏—Å–æ–∫
    kb = []
    nav_row = []
    if len(pages) > 1:
        nav_row.append(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="bio_nav:prev"))
        nav_row.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ¬ª", callback_data="bio_nav:next"))
        kb.append(nav_row)
    kb.append([InlineKeyboardButton("–ì–ª–æ—Å—Å–∞—Ä–∏–π", callback_data=f"gloss_letters:{thinker_key}")])
    kb.append([InlineKeyboardButton("–í —Å–ø–∏—Å–æ–∫ –º—ã—Å–ª–∏—Ç–µ–ª–µ–π", callback_data="to_list")])

    await update.callback_query.edit_message_text(f"<b>{thinker.get('display_name')}</b>\n\n{pages[0]}\n\n(<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{len(pages)}</i>)",
                                                 parse_mode="HTML", reply_markup=InlineKeyboardMarkup(kb))

async def bio_nav_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    user_view = context.user_data.get("view")
    if not user_view or user_view.get("type") != "bio":
        await update.callback_query.edit_message_text("–í—Ä–µ–º—è –≤—ã—à–ª–æ, –≤—ã–±–µ—Ä–∏ –º—ã—Å–ª–∏—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ: /start")
        return
    data = load_data()
    thinker_key = user_view["thinker"]
    bio = data[thinker_key].get("bio", "")
    pages = paginate_text(bio)
    page = user_view["page"]
    if update.callback_query.data.endswith("next"):
        page = min(page + 1, len(pages) - 1)
    else:
        page = max(0, page - 1)
    user_view["page"] = page
    context.user_data["view"] = user_view

    kb = []
    if len(pages) > 1:
        kb.append([
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="bio_nav:prev"),
            InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ¬ª", callback_data="bio_nav:next")
        ])
    kb.append([InlineKeyboardButton("–ì–ª–æ—Å—Å–∞—Ä–∏–π", callback_data=f"gloss_letters:{thinker_key}")])
    kb.append([InlineKeyboardButton("–í —Å–ø–∏—Å–æ–∫ –º—ã—Å–ª–∏—Ç–µ–ª–µ–π", callback_data="to_list")])

    await update.callback_query.edit_message_text(f"<b>{data[thinker_key].get('display_name')}</b>\n\n{pages[page]}\n\n(<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{len(pages)}</i>)",
                                                 parse_mode="HTML", reply_markup=InlineKeyboardMarkup(kb))

async def to_list_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    # –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
    data = load_data()
    kb = []
    row = []
    for key, v in data.items():
        row.append(InlineKeyboardButton(v.get("display_name", key), callback_data=f"thinker:{key}"))
        if len(row) == 2:
            kb.append(row); row = []
    if row:
        kb.append(row)
    kb.append([InlineKeyboardButton("–û –±–æ—Ç–µ", callback_data="about")])
    await update.callback_query.edit_message_text("üìö <b>–ö–Ω–∏–≥–∞ –º—ã—Å–ª–∏—Ç–µ–ª–µ–π</b>\n\n–í—ã–±–µ—Ä–∏ –º—ã—Å–ª–∏—Ç–µ–ª—è:", parse_mode="HTML", reply_markup=InlineKeyboardMarkup(kb))

async def gloss_letters_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    _, thinker_key = update.callback_query.data.split(":")
    data = load_data()
    gloss = data[thinker_key].get("glossary", {})
    # –ø–æ–ª—É—á–∞–µ–º –±—É–∫–≤—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –µ—Å—Ç—å —Ç–µ—Ä–º–∏–Ω—ã, –≤ –ø–æ—Ä—è–¥–∫–µ –∞–ª—Ñ–∞–≤–∏—Ç–∞
    available = sorted(list(gloss.keys()), key=lambda ch: RUS_ALPHABET.index(ch) if ch in RUS_ALPHABET else 999)
    # build keyboard ‚Äî –±—É–∫–≤—ã –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä—è–¥–æ–≤
    kb = []
    row = []
    for i, ch in enumerate(available):
        row.append(InlineKeyboardButton(ch, callback_data=f"gloss_terms:{thinker_key}:{ch}"))
        if len(row) == 7:
            kb.append(row); row = []
    if row: kb.append(row)
    kb.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –±–∏–æ–≥—Ä–∞—Ñ–∏—é", callback_data=f"thinker:{thinker_key}")])
    kb.append([InlineKeyboardButton("–í —Å–ø–∏—Å–æ–∫ –º—ã—Å–ª–∏—Ç–µ–ª–µ–π", callback_data="to_list")])
    await update.callback_query.edit_message_text(f"üìñ <b>–ì–ª–æ—Å—Å–∞—Ä–∏–π ‚Äî {data[thinker_key].get('display_name')}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É:",
                                                 parse_mode="HTML", reply_markup=InlineKeyboardMarkup(kb))

async def gloss_terms_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    _, thinker_key, letter = update.callback_query.data.split(":")
    data = load_data()
    terms = data[thinker_key].get("glossary", {}).get(letter, [])
    if not terms:
        await update.callback_query.edit_message_text("–¢–µ—Ä–º–∏–Ω—ã –Ω–∞ —ç—Ç—É –±—É–∫–≤—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ—Ä–º–∏–Ω–æ–≤
    text_parts = [f"üìö <b>–ì–ª–æ—Å—Å–∞—Ä–∏–π ‚Äî {data[thinker_key].get('display_name')}</b>",
                  f"<b>–ë—É–∫–≤–∞ {letter}</b> ‚Äî –Ω–∞–π–¥–µ–Ω–æ {len(terms)} —Ç–µ—Ä–º–∏–Ω–æ–≤:\n"]
    for t in terms:
        text_parts.append(f"‚Ä¢ <b>{t.get('term')}</b>\n{t.get('definition')}\n")
    text = "\n".join(text_parts)
    kb = [
        [InlineKeyboardButton("‚Üê –ö –±—É–∫–≤–∞–º", callback_data=f"gloss_letters:{thinker_key}")],
        [InlineKeyboardButton("–í –±–∏–æ–≥—Ä–∞—Ñ–∏—é", callback_data=f"thinker:{thinker_key}"),
         InlineKeyboardButton("–í —Å–ø–∏—Å–æ–∫ –º—ã—Å–ª–∏—Ç–µ–ª–µ–π", callback_data="to_list")]
    ]
    await update.callback_query.edit_message_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(kb))

# --- —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(about_cb, pattern="^about$"))
    app.add_handler(CallbackQueryHandler(thinker_cb, pattern="^thinker:"))
    app.add_handler(CallbackQueryHandler(bio_nav_cb, pattern="^bio_nav:"))
    app.add_handler(CallbackQueryHandler(to_list_cb, pattern="^to_list$"))
    app.add_handler(CallbackQueryHandler(gloss_letters_cb, pattern="^gloss_letters:"))
    app.add_handler(CallbackQueryHandler(gloss_terms_cb, pattern="^gloss_terms:"))

    print("Bot started")
    app.run_polling()

if __name__ == "__main__":
    main()
